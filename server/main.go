package main

import (
	_ "embed"
	"encoding/json"
	"net/http"
	"server/models"
	model "server/proto"
	"time"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/timestamppb"
)

//go:embed f.json
var data []byte

func main() {
	m := http.NewServeMux()

	var mm []models.AutoGenerated
	if err := json.Unmarshal(data, &mm); err != nil {
		panic(err)
	}
	res := make([]*model.Auto, len(mm))
	for i := range mm {
		res[i] = &model.Auto{
			CreatedAt: timestamppb.New(time.Unix(0, int64(mm[i].CreatedAt))),
			Public:    mm[i].Public,
			ID:        mm[i].ID,
			Type:      mm[i].Type,
			Actor: &model.Actor{
				ID:         int64(mm[i].Actor.ID),
				Login:      mm[i].Actor.Login,
				GravatarID: mm[i].Actor.GravatarID,
				URL:        mm[i].Actor.URL,
				AvatarURL:  mm[i].Actor.AvatarURL,
			},
			Repo: &model.Repo{
				ID:   int64(mm[i].Repo.ID),
				Name: mm[i].Repo.Name,
				URL:  mm[i].Repo.URL,
			},
			Payload: &model.Payload{
				Ref:          mm[i].Payload.Ref,
				RefType:      mm[i].Payload.RefType,
				MasterBranch: mm[i].Payload.MasterBranch,
				Description:  mm[i].Payload.Description,
				PusherType:   mm[i].Payload.PusherType,
			},
		}
	}

	m.Handle("/healthz", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(200)
	}),
	)

	m.Handle("/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		protoData, err := proto.Marshal(&model.AutoList{Autos: res})
		if err != nil {
			panic(err)
		}
		w.Write(protoData)
	}),
	)

	http.ListenAndServe(":8000", m)
}
