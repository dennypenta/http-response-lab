package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"runtime/pprof"
	"time"
)

type AutoGenerated struct {
	ID    string `json:"id"`
	Type  string `json:"type"`
	Actor struct {
		ID         int    `json:"id"`
		Login      string `json:"login"`
		GravatarID string `json:"gravatar_id"`
		URL        string `json:"url"`
		AvatarURL  string `json:"avatar_url"`
	} `json:"actor"`
	Repo struct {
		ID   int    `json:"id"`
		Name string `json:"name"`
		URL  string `json:"url"`
	} `json:"repo"`
	Payload struct {
		Ref          string `json:"ref"`
		RefType      string `json:"ref_type"`
		MasterBranch string `json:"master_branch"`
		Description  string `json:"description"`
		PusherType   string `json:"pusher_type"`
	} `json:"payload"`
	Public    bool      `json:"public"`
	CreatedAt time.Time `json:"created_at"`
}

var started bool
var copy string

func newSplitFunc() func(data []byte, atEOF bool) (advance int, token []byte, err error) {
	return func(data []byte, atEOF bool) (advance int, token []byte, err error) {
		var openBracet int
		if atEOF && len(data) == 0 {
			return 0, nil, nil
		}
		skipped := 0
		if data[0] == '}' && openBracet == 0 {
			skipped += 1
			data = data[1:]
		}
		if data[0] == ',' && openBracet == 0 {
			skipped += 1
			data = data[1:]
		}
		if !started && data[0] == '[' {
			skipped += 1
			data = data[1:]
			started = true
		}

		inQuotes := false
		escaping := false

		for i, sym := range data {
			switch sym {
			case '"':
				if escaping {
					escaping = false
				} else {
					inQuotes = !inQuotes
				}
			case '\\':
				escaping = !escaping
			case '{':
				if i != 0 && data[i-1] == '\\' {
					escaping = false
				}
				if inQuotes {
					continue
				}
				openBracet += 1
			case '}':
				if i != 0 && data[i-1] == '\\' {
					escaping = false
				}
				if inQuotes {
					continue
				}
				openBracet -= 1
				if openBracet == 0 {
					buf := data[:i+1]
					return i + 1 + skipped, buf, nil
				}

			default:
				if i != 0 && data[i-1] == '\\' {
					escaping = false
				}
			}
			continue
		}

		return 0, nil, nil
	}
}

func decode(r io.Reader) ([]AutoGenerated, error) {
	var models []AutoGenerated
	size := (1024 << 10) * 20
	r = bufio.NewReaderSize(r, size)
	scanner := bufio.NewScanner(r)
	scanner.Split(newSplitFunc())
	for scanner.Scan() {
		var m AutoGenerated
		v := scanner.Text()
		if err := json.Unmarshal([]byte(v), &m); err != nil {
			return models, err
		}

		models = append(models, m)
	}

	fmt.Println(copy)
	return models, nil
}

func main() {
	res, err := http.DefaultClient.Get("http://localhost:8000")
	if err != nil {
		panic(err.Error())
	}
	defer res.Body.Close()
	models, err := decode(res.Body)
	if err != nil {
		panic(err.Error())
	}

	if len(models) == 0 {
		panic("models must not be empty")
	}
	fmt.Println("DONE")
	fmt.Println(len(models))

	f, _ := os.Create("mem.pprof")
	pprof.WriteHeapProfile(f)
	f.Close()
}
