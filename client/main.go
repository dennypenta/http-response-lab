package main

import (
	"encoding/gob"
	"fmt"
	"io"
	"net/http"
	"os"
	"runtime/pprof"
)

type TimeNanosec int64

type AutoGenerated struct {
	CreatedAt TimeNanosec `json:"created_at"`
	Public    bool        `json:"public"`
	ID        string      `json:"id"`
	Type      string      `json:"type"`
	Actor     struct {
		ID         int    `json:"id"`
		Login      string `json:"login"`
		GravatarID string `json:"gravatar_id"`
		URL        string `json:"url"`
		AvatarURL  string `json:"avatar_url"`
	} `json:"actor"`
	Repo struct {
		ID   int    `json:"id"`
		Name string `json:"name"`
		URL  string `json:"url"`
	} `json:"repo"`
	Payload struct {
		Ref          string `json:"ref"`
		RefType      string `json:"ref_type"`
		MasterBranch string `json:"master_branch"`
		Description  string `json:"description"`
		PusherType   string `json:"pusher_type"`
	} `json:"payload"`
}

func decode(r io.Reader) ([]AutoGenerated, error) {
	var mm []AutoGenerated
	err := gob.NewDecoder(r).Decode(&mm)

	if err != nil {
		return nil, err
	}

	return mm, nil
}

func main() {
	gob.Register(AutoGenerated{})
	res, err := http.DefaultClient.Get("http://localhost:8000")
	if err != nil {
		panic(err.Error())
	}
	defer res.Body.Close()
	models, err := decode(res.Body)
	if err != nil {
		panic(err.Error())
	}

	if len(models) == 0 {
		panic("models must not be empty")
	}
	fmt.Println("DONE")
	fmt.Println(len(models))

	f, _ := os.Create("mem.pprof")
	pprof.WriteHeapProfile(f)
	f.Close()
}
